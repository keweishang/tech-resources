---
syntax: bash
---

# ----- Global Configuration -----

# Configure user for all repositories globablly
git config --global user.name <user-name>
git config --global user.email <user-email>

# Configure git-ignore globally
git config --global core.excludesfile ~/.gitignore_global

# To always --prune for `git fetch` and `git pull` in all your Git repositories,
# useful for cleaning outdated references.
# https://stackoverflow.com/questions/18308535/automatic-prune-with-git-fetch-or-pull
git config --global fetch.prune true

# Using GPG Key
git config --global commit.gpgsign true
git config --global user.signingkey <GPGKey>

# Proxy
git config --global http.proxy <proxy-url>
git config --global --unset http.proxy

# ----- Git Alias -----

git config --global alias.amend 'commit --amend'
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.pr 'pull --rebase'
git config --global alias.wip 'commit -a -m wip'
git config --global alias.cpick cherry-pick
git config --global alias.last 'log -1 HEAD'
git config --global alias.lg 'log --oneline'
git config --global alias.graph 'log --graph --all --oneline --decorate'

# Using GPG Key
git config --global alias.last 'log --show-signature -1 HEAD'
git config --global alias.lg 'log --format="%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,reset)%s%C(auto,red bold)% gD% D"'

# Proxy
git config http.proxy <proxy-url>
git config --unset http.proxy

# ----- Initialization -----
git init
git init --bare


# ----- GPG Signed Commit -----

# Disable GPG signature for a single repository:
git config commit.gpgsign false


# ----- Reset -----

# Use reset when your changes cannot be seen by other developers (e.p. by conv-
# ention or because it is local). If it's seen by others, use revert instead.
# There are 3 types of reset: soft, mixed, hard.

# Soft: reset git commit history to a (previous) commit id, put the diff chang-
# es in staging directory
git reset --soft <commit-id>

# Mixed: reset git commit history to a (previous) commit id, put the diff chan-
# ges in working directory
git reset <commit-id>

# git reset without a commit-id will unstage the changes (without losing them)
git reset

# Interactively preview and unstage individual changes. It works even within t-
# he same file, part of the file can be unstaged, other parts will stay staged.
git reset -p

# Hard: reset git commit history to a (previous) commit id, revert all changes
# of tracked files to the previous state, leaves untracked files alone
git reset --hard <commit-id>


# ----- Revert -----

# Use revert if other developers have seen your changes, and you want to "reve-
# rt" your changes. This will create a new commit instead of changing the comm-
# it history. The following command will revert the changes in the commit.
git revert <commit-id>


# ----- Clean -----

# Clean untracked files and directories. The option -d and -f means cleaning f-
# iles and directories respectively
git clean -df


# ----- Cherry Pick -----

# Use case 1: make a new commit based off another commit from another branch. 
# Typically used when you committed in the wrong branch and want to move the 
# commit to the correct branch. Use reset --hard and clean to revert the wrong 
# branch to the initial state.

# Use case 2: back-port changes to other versions of your software. 
# For example, you have a bug-fix to do, and it should be addressed to 
# branch 1.x, 2.x, and master. After fixing it on master, you can cherry-pick 
# the commit from master to 1.x and 2.x.

# Note: you don't have to specify the branch from which the commit is from.
# Just the commit id would be enough.
git cherry-pick <commit-id>


# ----- Add -----

# Interactively preview and stage individual changes. It works even within the 
# same file, part of the file can be staged, other parts will not be unstaged.
git add -p


# ----- Log -----

# --all means show me things that are in my repo but which are not necessarily 
# the ancestors of my current commit. a.k.a all branches; 
# --graph means show a graph.
# --decorate means show extra info about remote branches.
git log --oneline --decorate --all --graph

# Show the changes of a file, work even if the file was deleted.
git log --full-history -- myfile
